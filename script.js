// Generated by CoffeeScript 1.6.3
(function() {
  var __;

  __ = function() {
    console.log.apply(console, arguments);
    return arguments[0];
  };

  $(function() {
    var Map, choices, init, render, state, update;
    Map = {
      street: {
        go: {
          'to work': 'i dont really need that',
          'to a friends house': 'i cant go there, its too soon.',
          'home': 'i guess im already there',
          'to acid party': 'this is a good party'
        },
        'don\'t': {
          'go anywhere and wait': 'finally a good idea!',
          'do nothing': 'nothing so painful'
        },
        'download': {
          'some shit': {
            t: 'i get some acid playing in my ears in a minute',
            c: [111, 'street', 'go', 'acid party']
          },
          'the link': 'i type my password in, and after a second im looking at my stats'
        }
      }
    };
    choices = function(current, input) {
      var k, v, _results;
      _results = [];
      for (k in current) {
        v = current[k];
        if ((k.indexOf(input)) === 0) {
          _results.push(k);
        }
      }
      return _results;
    };
    init = function() {
      return {
        path: [],
        current: Map.street,
        input: ''
      };
    };
    update = function(_arg, _arg1) {
      var back, cs, current, enter, input, node, p, path, val;
      path = _arg.path, current = _arg.current, input = _arg.input;
      enter = _arg1.enter, back = _arg1.back, val = _arg1.val;
      if (val) {
        input = val;
      }
      cs = choices(current, input);
      if (back && current !== init().current) {
        return {
          path: path.slice(0, -1),
          current: ((function() {
            var _i, _len, _ref, _results;
            node = init().current;
            _ref = path.slice(0, -1);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              p = _ref[_i];
              node = node[p];
              _results.push(node);
            }
            return _results;
          })()),
          input: ''
        };
      } else {
        if (cs.length === 1) {
          if (_.isString(current[cs[0]])) {
            if (enter) {
              return _.extend(init(), {
                log: "<p>" + current[cs[0]] + "</p>"
              });
            } else {
              return {
                path: path,
                current: current,
                input: input
              };
            }
          } else {
            return {
              path: path.concat([cs[0]]),
              current: current[cs[0]],
              input: ''
            };
          }
        } else {
          return {
            path: path,
            current: current,
            input: input
          };
        }
      }
    };
    render = function(_arg) {
      var current, input, log, path;
      path = _arg.path, current = _arg.current, input = _arg.input, log = _arg.log;
      ($('.choices')).html((choices(current, input)).map(function(s) {
        return "<p>" + s + "</p>";
      }));
      ($('.preinput')).html(path.join(' '));
      $('#input').val(input);
      if (log) {
        return ($('.log')).append(log);
      }
    };
    render(state = init());
    ($('#input')).keyup(function(e) {
      if (e.keyCode === 13) {
        return render(state = update(state, {
          enter: true
        }));
      } else {
        return render(state = update(state, {
          val: ($('#input')).val()
        }));
      }
    });
    return ($('#input')).keydown(function(e) {
      if (e.keyCode === 8 && ($('#input')).val() === '') {
        return render(state = update(state, {
          back: true
        }));
      }
    });
  });

}).call(this);
