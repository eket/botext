// Generated by CoffeeScript 1.6.3
(function() {
  var Map, render_hub_scene, render_hub_verb, render_page, states, __,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  __ = function() {
    console.log.apply(console, arguments);
    return arguments[0];
  };

  Map = window.Map;

  states = {
    scene: function(scene, node) {
      render_page(node);
      return render_hub_scene(scene, {
        click_verb: function(verb) {
          return states.verb(scene, verb);
        }
      });
    },
    verb: function(scene, verb) {
      return render_hub_verb(scene, verb, {
        click_back: function() {
          return states.scene(scene);
        },
        click_word: function(word) {
          var node, sk, sv, vk, vv, wk, wv, _base, _ref, _ref1;
          __(scene, verb, word);
          node = Map[scene][verb][word];
          _ref = node.set;
          for (sk in _ref) {
            sv = _ref[sk];
            if (Map[sk] == null) {
              Map[sk] = sv;
            }
            for (vk in sv) {
              vv = sv[vk];
              if ((_base = Map[sk])[vk] == null) {
                _base[vk] = vv;
              }
              for (wk in vv) {
                wv = vv[wk];
                Map[sk][vk][wk] = wv;
              }
            }
          }
          if (node.del != null) {
            for (sk in Map) {
              sv = Map[sk];
              for (vk in sv) {
                vv = sv[vk];
                for (wk in vv) {
                  wv = vv[wk];
                  if (__indexOf.call(node.del, wk) >= 0) {
                    delete vv[wk];
                  }
                }
                if (__indexOf.call(node.del, vk) >= 0 || _.isEmpty(sv[vk])) {
                  delete sv[vk];
                }
              }
            }
          }
          try {
            delete Map[scene][verb][word];
          } catch (_error) {}
          if (((node != null ? (_ref1 = node.del) != null ? _ref1.length : void 0 : void 0) === 0) || _.isEmpty(Map[scene][verb])) {
            delete Map[scene][verb];
          }
          return states.scene(node.scene || scene, node);
        }
      });
    }
  };

  render_hub_scene = function(scene, _arg) {
    var click_verb, el, v, _i, _len, _ref, _results;
    click_verb = _arg.click_verb;
    $('#verbs').empty();
    $('#words').empty();
    _ref = _.keys(Map[scene]);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      el = $("<div class='left button'>" + v + "</div>");
      el.on('mouseup', (function(v) {
        return function() {
          return click_verb(v);
        };
      })(v));
      _results.push($('#verbs').append(el));
    }
    return _results;
  };

  render_hub_verb = function(scene, verb, _arg) {
    var ce, click_back, click_word, el, node, w, _i, _len, _ref, _results;
    click_word = _arg.click_word, click_back = _arg.click_back;
    node = Map[scene][verb];
    $('#verbs').empty();
    $('#words').empty();
    ce = $("<div class='selected left button'>" + verb + "</div>");
    ce.on('mouseup', click_back);
    $('#verbs').append(ce);
    _ref = _.keys(Map[scene][verb]);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      w = _ref[_i];
      el = $("<div class='right button'>" + w + "</div>");
      el.on('mouseup', (function(w) {
        return function() {
          return click_word(w);
        };
      })(w));
      el.on('mouseenter', (function(el) {
        return function() {
          return $('.selected.button').css({
            top: (el.position().top) + 'px'
          });
        };
      })(el));
      _results.push($('#words').append(el));
    }
    return _results;
  };

  render_page = function(node) {
    if (node == null) {
      return;
    }
    if (node.scene != null) {
      $('#page').append("<pre class='inter'>***");
    }
    if (node.img != null) {
      $('#page').append("<pre class='inter'><img src='img/" + node.img + "'></pre>");
    }
    if (node.bg != null) {
      $('body').css({
        background: "url(img/" + node.bg + ")"
      });
    }
    $('#page').append("<pre>    " + (node.t || node));
    return $('#page').scrollTop($('#page')[0].scrollHeight);
  };

  $('#page').append("<pre class='inter title'>" + Map.opening.title);

  $('#page').append("<pre>    " + Map.opening.t);

  states.scene('street');

}).call(this);

/*
//@ sourceMappingURL=engine.map
*/
