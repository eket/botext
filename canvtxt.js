// Generated by CoffeeScript 1.6.3
var map, render_scene, render_verb, render_word, state, __;

__ = function() {
  console.log.apply(console, arguments);
  return arguments[0];
};

map = {
  gabba: {
    dance: {
      'to music': '4/4/4/4/4',
      'to waves': 'whoohoooo',
      'till sunrise': 'you dance till the sun comes up and your eyes cant bear the rise'
    }
  },
  street: {
    go: {
      'to work': 'i dont really need that',
      'to a friends house': 'i cant go there, its too soon.',
      'home': 'i guess im already there'
    },
    'don\'t': {
      'go anywhere and wait': 'finally a good idea!',
      'do nothing': 'nothing so painful'
    },
    download: {
      'some shit': {
        t: 'i get some acid playing in my ears in a minute',
        set: {
          street: {
            go: {
              'gabba': {
                t: 'okay, lets do it!',
                scene: 'gabba'
              },
              'eki': 'para'
            }
          }
        },
        del: {
          street: {
            go: 'to work'
          }
        }
      },
      'the link': 'i type my password in, and after a second im looking at my stats'
    }
  }
};

state = {
  scene: 'street'
};

render_scene = function(scene) {
  var el, v, _i, _len, _ref, _results;
  $('#verbs').empty();
  $('#words').empty();
  _ref = _.keys(map[scene]);
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    v = _ref[_i];
    el = $("<div class='button'>" + v + "</div>");
    el.on('mouseup', (function(v) {
      return function() {
        return render_verb(v);
      };
    })(v));
    _results.push($('#verbs').append(el));
  }
  return _results;
};

render_verb = function(verb) {
  var ce, el, w, _i, _len, _ref, _results;
  $('#verbs').empty();
  $('#words').empty();
  state.verb = verb;
  ce = $("<div class='selected button'>" + verb + "</div>");
  ce.on('mouseup', function() {
    return render_scene(state.scene);
  });
  $('#verbs').append(ce);
  _ref = _.keys(map[state.scene][verb]);
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    w = _ref[_i];
    el = $("<div class='button'>" + w + "</div>");
    el.on('mouseup', (function(w) {
      return function() {
        return render_word(w);
      };
    })(w));
    el.on('mouseenter', (function(el) {
      return function() {
        return $('.selected.button').css({
          top: (el.position().top) + 'px'
        });
      };
    })(el));
    _results.push($('#words').append(el));
  }
  return _results;
};

render_word = function(word) {
  var a, node, sk, sv, vk, vv, wk, wv, _base, _ref, _ref1;
  node = map[state.scene][state.verb][word];
  if (node.t != null) {
    $('#page').append("<br>" + node.t);
    $('#page').scrollTop($('#page')[0].scrollHeight);
    _ref = node.set;
    for (sk in _ref) {
      sv = _ref[sk];
      if (map[sk] == null) {
        map[sk] = sv;
      }
      for (vk in sv) {
        vv = sv[vk];
        if ((_base = map[sk])[vk] == null) {
          _base[vk] = vv;
        }
        for (wk in vv) {
          wv = vv[wk];
          map[sk][vk][wk] = wv;
        }
      }
    }
    _ref1 = node.del;
    for (sk in _ref1) {
      sv = _ref1[sk];
      for (vk in sv) {
        vv = sv[vk];
        delete map[sk][vk][vv];
      }
      if (_.isEmpty(map[sk][vk])) {
        delete map[sk];
      }
    }
  } else {
    $('#page').append("<br>" + map[state.scene][state.verb][word]);
    $('#page').scrollTop($('#page')[0].scrollHeight);
  }
  a = state;
  delete map[state.scene][state.verb][word];
  if (_.isEmpty(_.keys(map[state.scene][state.verb]))) {
    delete map[state.scene][state.verb];
  }
  if (node.scene != null) {
    state = {
      scene: node.scene
    };
  }
  return render_scene(state.scene);
};

render_scene('street');

$('#page').scrollTop($('#page')[0].scrollHeight);
